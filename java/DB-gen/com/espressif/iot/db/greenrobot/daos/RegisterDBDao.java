package com.espressif.iot.db.greenrobot.daos;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.espressif.iot.db.greenrobot.daos.RegisterDB;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table USER_DB.
 */
public class RegisterDBDao extends AbstractDao<RegisterDB, Long> {

	public static final String TABLENAME = "REGISTER_DB";

	/**
	 * Properties of entity RegisterDB.<br/>
	 * Can be used for QueryBuilder and for referencing column names.
	 */
	public static class Properties {
		public final static Property Id = new Property(0, long.class, "id",
				true, "_id");

		public final static Property RegType = new Property(1, Integer.class,
				"regType", false, "REGTYPE");

		public final static Property RegAddr = new Property(2, Integer.class,
				"regAddr", false, "REGADDR");

		public final static Property RegName = new Property(3, String.class,
				"regName", false, "REGNAME");

		public final static Property IsSpinned = new Property(4, boolean.class,
				"isSpinned", false, "ISSPINNED");
	};

	private DaoSession daoSession;

	public RegisterDBDao(DaoConfig config) {
		super(config);
	}

	public RegisterDBDao(DaoConfig config, DaoSession daoSession) {
		super(config, daoSession);
		this.daoSession = daoSession;
	}

	/** Creates the underlying database table. */
	public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
		String constraint = ifNotExists ? "IF NOT EXISTS " : "";
		db.execSQL("CREATE TABLE " + constraint + "'REGISTER_DB' (" + //
				"'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
				"'REGTYPE' INTEGER NOT NULL ," + // 1: regType
				"'REGADDR' INTEGER NOT NULL ," + // 2: regAddr
				"'REGNAME' TEXT NOT NULL ," + // 3: regName
				"'ISSPINNED' INTEGER NOT NULL );"); // 4: isSpinned
	}

	/** Drops the underlying database table. */
	public static void dropTable(SQLiteDatabase db, boolean ifExists) {
		String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "")
				+ "'REGISTER_DB'";
		db.execSQL(sql);
	}

	/** @inheritdoc */
	@Override
	protected void bindValues(SQLiteStatement stmt, RegisterDB entity) {
		stmt.clearBindings();
		stmt.bindLong(1, entity.getId());
		stmt.bindLong(2, entity.getRegType());
		stmt.bindLong(3, entity.getRegAddr());
		stmt.bindString(4, entity.getRegName());
		stmt.bindLong(5, entity.getIsSpinned() ? 1l : 0l);
	}

	@Override
	protected void attachEntity(RegisterDB entity) {
		super.attachEntity(entity);
		entity.__setDaoSession(daoSession);
	}

	/** @inheritdoc */
	@Override
	public Long readKey(Cursor cursor, int offset) {
		return cursor.getLong(offset + 0);
	}

	/** @inheritdoc */
	@Override
	public RegisterDB readEntity(Cursor cursor, int offset) {
		RegisterDB entity = new RegisterDB( //
				cursor.getLong(offset + 0), // id
				cursor.getInt(offset + 1), // regType
				cursor.getInt(offset + 2), // regAddr
				cursor.getString(offset + 3), // regName
				cursor.getShort(offset + 4) != 0 // isSpinned
		);
		return entity;
	}

	/** @inheritdoc */
	@Override
	public void readEntity(Cursor cursor, RegisterDB entity, int offset) {
		entity.setId(cursor.getLong(offset + 0));
		entity.setRegType(cursor.getInt(offset + 1));
		entity.setRegAddr(cursor.getInt(offset + 2));
		entity.setRegName(cursor.getString(offset + 3));
		entity.setIsSpinned(cursor.getShort(offset + 4) != 0);
	}

	/** @inheritdoc */
	@Override
	protected Long updateKeyAfterInsert(RegisterDB entity, long rowId) {
		entity.setId(rowId);
		return rowId;
	}

	/** @inheritdoc */
	@Override
	public Long getKey(RegisterDB entity) {
		if (entity != null) {
			return entity.getId();
		} else {
			return null;
		}
	}

	/** @inheritdoc */
	@Override
	protected boolean isEntityUpdateable() {
		return true;
	}

}
